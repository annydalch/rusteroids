pub struct BouncingSquare {
    x: i32,
    y: i32,
    width: u32,
    height: u32,
    dx: i32,
    dy: i32,
    color: Color,
}

impl BouncingSquare {
    fn make_rect(&self) -> Rect {
        Rect::new(self.x, self.y, self.width, self.height)
    }
    fn update_position(&mut self) {
        if (self.x <= 0) || ((self.x + (self.width as i32)) >= (WINDOW_DIMENSIONS.0 as i32)) {
            self.dx *= -1;
        }
        if (self.y <= 0) || ((self.y + (self.height as i32)) >= (WINDOW_DIMENSIONS.1 as i32)) {
            self.dy *= -1;
        }
        self.x += self.dx;
        self.y += self.dy;
    }
    fn draw(&self, mut renderer: &mut sdl2::render::Renderer) {
        renderer.set_draw_color(self.color);
        renderer.fill_rect(self.make_rect())
            .unwrap();
    }
    fn new(starting_x: i32, starting_y: i32, width: u32, height: u32, dx: i32, dy: i32, color: Color) -> BouncingSquare {
        BouncingSquare{
            x: starting_x,
            y: starting_y,
            width: width,
            height: height,
            dx: dx,
            dy: dy,
            color: color,
        }
    }
}
